<?php
/**
 * PlatformCompany
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  com.brand4impact.client.invoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Total API Reference
 *
 * Este contrato se usara para generar los clientes con todos los servicios necesarios.  `!Uso exclusivo interno!`               ---
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@brand4impact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.brand4impact.client.invoker\com.brand4impact.client.model;

use \ArrayAccess;
use \com.brand4impact.client.invoker\ObjectSerializer;

/**
 * PlatformCompany Class Doc Comment
 *
 * @category Class
 * @package  com.brand4impact.client.invoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PlatformCompany implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PlatformCompany';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'token' => 'string',
        'id' => 'string',
        'name' => 'string',
        'vat' => 'string',
        'status' => 'string',
        'address' => '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyAddress',
        'legal' => '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyLegal',
        'sectorToken' => 'string',
        'topicsToken' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'token' => null,
        'id' => null,
        'name' => null,
        'vat' => null,
        'status' => null,
        'address' => null,
        'legal' => null,
        'sectorToken' => null,
        'topicsToken' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'token' => 'token',
        'id' => 'id',
        'name' => 'name',
        'vat' => 'vat',
        'status' => 'status',
        'address' => 'address',
        'legal' => 'legal',
        'sectorToken' => 'sectorToken',
        'topicsToken' => 'topicsToken'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'token' => 'setToken',
        'id' => 'setId',
        'name' => 'setName',
        'vat' => 'setVat',
        'status' => 'setStatus',
        'address' => 'setAddress',
        'legal' => 'setLegal',
        'sectorToken' => 'setSectorToken',
        'topicsToken' => 'setTopicsToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'token' => 'getToken',
        'id' => 'getId',
        'name' => 'getName',
        'vat' => 'getVat',
        'status' => 'getStatus',
        'address' => 'getAddress',
        'legal' => 'getLegal',
        'sectorToken' => 'getSectorToken',
        'topicsToken' => 'getTopicsToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['token'] = $data['token'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['vat'] = $data['vat'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['legal'] = $data['legal'] ?? null;
        $this->container['sectorToken'] = $data['sectorToken'] ?? null;
        $this->container['topicsToken'] = $data['topicsToken'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token token
     *
     * @return self
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return string|null
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param string|null $vat vat
     *
     * @return self
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets legal
     *
     * @return \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyLegal|null
     */
    public function getLegal()
    {
        return $this->container['legal'];
    }

    /**
     * Sets legal
     *
     * @param \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyLegal|null $legal legal
     *
     * @return self
     */
    public function setLegal($legal)
    {
        $this->container['legal'] = $legal;

        return $this;
    }

    /**
     * Gets sectorToken
     *
     * @return string|null
     */
    public function getSectorToken()
    {
        return $this->container['sectorToken'];
    }

    /**
     * Sets sectorToken
     *
     * @param string|null $sectorToken sectorToken
     *
     * @return self
     */
    public function setSectorToken($sectorToken)
    {
        $this->container['sectorToken'] = $sectorToken;

        return $this;
    }

    /**
     * Gets topicsToken
     *
     * @return string[]|null
     */
    public function getTopicsToken()
    {
        return $this->container['topicsToken'];
    }

    /**
     * Sets topicsToken
     *
     * @param string[]|null $topicsToken topicsToken
     *
     * @return self
     */
    public function setTopicsToken($topicsToken)
    {
        $this->container['topicsToken'] = $topicsToken;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


