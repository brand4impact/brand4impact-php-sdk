<?php
/**
 * PlatformCampaign
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  com.brand4impact.client.invoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Total API Reference
 *
 * Este contrato se usara para generar los clientes con todos los servicios necesarios.  `!Uso exclusivo interno!`               ---
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@brand4impact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.brand4impact.client.invoker\com.brand4impact.client.model;

use \ArrayAccess;
use \com.brand4impact.client.invoker\ObjectSerializer;

/**
 * PlatformCampaign Class Doc Comment
 *
 * @category Class
 * @package  com.brand4impact.client.invoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PlatformCampaign implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PlatformCampaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'token' => 'string',
        'id' => 'string',
        'title' => 'string',
        'description' => 'string',
        'startdate' => '\DateTime',
        'enddate' => '\DateTime',
        'primaryImageToken' => 'string',
        'secondaryImageToken' => 'string',
        'videoUrl' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'token' => null,
        'id' => null,
        'title' => null,
        'description' => null,
        'startdate' => 'date-time',
        'enddate' => 'date-time',
        'primaryImageToken' => null,
        'secondaryImageToken' => null,
        'videoUrl' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'token' => 'token',
        'id' => 'id',
        'title' => 'title',
        'description' => 'description',
        'startdate' => 'startdate',
        'enddate' => 'enddate',
        'primaryImageToken' => 'primaryImageToken',
        'secondaryImageToken' => 'secondaryImageToken',
        'videoUrl' => 'videoUrl',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'token' => 'setToken',
        'id' => 'setId',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'startdate' => 'setStartdate',
        'enddate' => 'setEnddate',
        'primaryImageToken' => 'setPrimaryImageToken',
        'secondaryImageToken' => 'setSecondaryImageToken',
        'videoUrl' => 'setVideoUrl',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'token' => 'getToken',
        'id' => 'getId',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'startdate' => 'getStartdate',
        'enddate' => 'getEnddate',
        'primaryImageToken' => 'getPrimaryImageToken',
        'secondaryImageToken' => 'getSecondaryImageToken',
        'videoUrl' => 'getVideoUrl',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['token'] = $data['token'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['startdate'] = $data['startdate'] ?? null;
        $this->container['enddate'] = $data['enddate'] ?? null;
        $this->container['primaryImageToken'] = $data['primaryImageToken'] ?? null;
        $this->container['secondaryImageToken'] = $data['secondaryImageToken'] ?? null;
        $this->container['videoUrl'] = $data['videoUrl'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token token
     *
     * @return self
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets startdate
     *
     * @return \DateTime|null
     */
    public function getStartdate()
    {
        return $this->container['startdate'];
    }

    /**
     * Sets startdate
     *
     * @param \DateTime|null $startdate startdate
     *
     * @return self
     */
    public function setStartdate($startdate)
    {
        $this->container['startdate'] = $startdate;

        return $this;
    }

    /**
     * Gets enddate
     *
     * @return \DateTime|null
     */
    public function getEnddate()
    {
        return $this->container['enddate'];
    }

    /**
     * Sets enddate
     *
     * @param \DateTime|null $enddate enddate
     *
     * @return self
     */
    public function setEnddate($enddate)
    {
        $this->container['enddate'] = $enddate;

        return $this;
    }

    /**
     * Gets primaryImageToken
     *
     * @return string|null
     */
    public function getPrimaryImageToken()
    {
        return $this->container['primaryImageToken'];
    }

    /**
     * Sets primaryImageToken
     *
     * @param string|null $primaryImageToken primaryImageToken
     *
     * @return self
     */
    public function setPrimaryImageToken($primaryImageToken)
    {
        $this->container['primaryImageToken'] = $primaryImageToken;

        return $this;
    }

    /**
     * Gets secondaryImageToken
     *
     * @return string|null
     */
    public function getSecondaryImageToken()
    {
        return $this->container['secondaryImageToken'];
    }

    /**
     * Sets secondaryImageToken
     *
     * @param string|null $secondaryImageToken secondaryImageToken
     *
     * @return self
     */
    public function setSecondaryImageToken($secondaryImageToken)
    {
        $this->container['secondaryImageToken'] = $secondaryImageToken;

        return $this;
    }

    /**
     * Gets videoUrl
     *
     * @return string|null
     */
    public function getVideoUrl()
    {
        return $this->container['videoUrl'];
    }

    /**
     * Sets videoUrl
     *
     * @param string|null $videoUrl videoUrl
     *
     * @return self
     */
    public function setVideoUrl($videoUrl)
    {
        $this->container['videoUrl'] = $videoUrl;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


