<?php
/**
 * PlatformInvoice
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  com.brand4impact.client.invoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Total API Reference
 *
 * Este contrato se usara para generar los clientes con todos los servicios necesarios.  `!Uso exclusivo interno!`               ---
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@brand4impact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.brand4impact.client.invoker\com.brand4impact.client.model;

use \ArrayAccess;
use \com.brand4impact.client.invoker\ObjectSerializer;

/**
 * PlatformInvoice Class Doc Comment
 *
 * @category Class
 * @package  com.brand4impact.client.invoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PlatformInvoice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PlatformInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'token' => 'string',
        'id' => 'string',
        'number' => 'string',
        'startdate' => '\DateTime',
        'enddate' => '\DateTime',
        'issuedate' => '\DateTime',
        'clientName' => 'string',
        'clientVat' => 'string',
        'clientAddress' => 'string',
        'entries' => 'array<string,\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformInvoiceEntry[]>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'token' => null,
        'id' => null,
        'number' => null,
        'startdate' => 'date-time',
        'enddate' => 'date-time',
        'issuedate' => 'date-time',
        'clientName' => null,
        'clientVat' => null,
        'clientAddress' => null,
        'entries' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'token' => 'token',
        'id' => 'id',
        'number' => 'number',
        'startdate' => 'startdate',
        'enddate' => 'enddate',
        'issuedate' => 'issuedate',
        'clientName' => 'clientName',
        'clientVat' => 'clientVat',
        'clientAddress' => 'clientAddress',
        'entries' => 'entries'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'token' => 'setToken',
        'id' => 'setId',
        'number' => 'setNumber',
        'startdate' => 'setStartdate',
        'enddate' => 'setEnddate',
        'issuedate' => 'setIssuedate',
        'clientName' => 'setClientName',
        'clientVat' => 'setClientVat',
        'clientAddress' => 'setClientAddress',
        'entries' => 'setEntries'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'token' => 'getToken',
        'id' => 'getId',
        'number' => 'getNumber',
        'startdate' => 'getStartdate',
        'enddate' => 'getEnddate',
        'issuedate' => 'getIssuedate',
        'clientName' => 'getClientName',
        'clientVat' => 'getClientVat',
        'clientAddress' => 'getClientAddress',
        'entries' => 'getEntries'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['token'] = $data['token'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['number'] = $data['number'] ?? null;
        $this->container['startdate'] = $data['startdate'] ?? null;
        $this->container['enddate'] = $data['enddate'] ?? null;
        $this->container['issuedate'] = $data['issuedate'] ?? null;
        $this->container['clientName'] = $data['clientName'] ?? null;
        $this->container['clientVat'] = $data['clientVat'] ?? null;
        $this->container['clientAddress'] = $data['clientAddress'] ?? null;
        $this->container['entries'] = $data['entries'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token token
     *
     * @return self
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets startdate
     *
     * @return \DateTime|null
     */
    public function getStartdate()
    {
        return $this->container['startdate'];
    }

    /**
     * Sets startdate
     *
     * @param \DateTime|null $startdate startdate
     *
     * @return self
     */
    public function setStartdate($startdate)
    {
        $this->container['startdate'] = $startdate;

        return $this;
    }

    /**
     * Gets enddate
     *
     * @return \DateTime|null
     */
    public function getEnddate()
    {
        return $this->container['enddate'];
    }

    /**
     * Sets enddate
     *
     * @param \DateTime|null $enddate enddate
     *
     * @return self
     */
    public function setEnddate($enddate)
    {
        $this->container['enddate'] = $enddate;

        return $this;
    }

    /**
     * Gets issuedate
     *
     * @return \DateTime|null
     */
    public function getIssuedate()
    {
        return $this->container['issuedate'];
    }

    /**
     * Sets issuedate
     *
     * @param \DateTime|null $issuedate issuedate
     *
     * @return self
     */
    public function setIssuedate($issuedate)
    {
        $this->container['issuedate'] = $issuedate;

        return $this;
    }

    /**
     * Gets clientName
     *
     * @return string|null
     */
    public function getClientName()
    {
        return $this->container['clientName'];
    }

    /**
     * Sets clientName
     *
     * @param string|null $clientName clientName
     *
     * @return self
     */
    public function setClientName($clientName)
    {
        $this->container['clientName'] = $clientName;

        return $this;
    }

    /**
     * Gets clientVat
     *
     * @return string|null
     */
    public function getClientVat()
    {
        return $this->container['clientVat'];
    }

    /**
     * Sets clientVat
     *
     * @param string|null $clientVat clientVat
     *
     * @return self
     */
    public function setClientVat($clientVat)
    {
        $this->container['clientVat'] = $clientVat;

        return $this;
    }

    /**
     * Gets clientAddress
     *
     * @return string|null
     */
    public function getClientAddress()
    {
        return $this->container['clientAddress'];
    }

    /**
     * Sets clientAddress
     *
     * @param string|null $clientAddress clientAddress
     *
     * @return self
     */
    public function setClientAddress($clientAddress)
    {
        $this->container['clientAddress'] = $clientAddress;

        return $this;
    }

    /**
     * Gets entries
     *
     * @return array<string,\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformInvoiceEntry[]>|null
     */
    public function getEntries()
    {
        return $this->container['entries'];
    }

    /**
     * Sets entries
     *
     * @param array<string,\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformInvoiceEntry[]>|null $entries entries
     *
     * @return self
     */
    public function setEntries($entries)
    {
        $this->container['entries'] = $entries;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


