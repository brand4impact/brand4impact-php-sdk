<?php
/**
 * CampaignApi
 * PHP version 7.3
 *
 * @category Class
 * @package  com.brand4impact.client.invoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Total API Reference
 *
 * Este contrato se usara para generar los clientes con todos los servicios necesarios.  `!Uso exclusivo interno!`               ---
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@brand4impact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.brand4impact.client.invoker\com.brand4impact.client.api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com.brand4impact.client.invoker\ApiException;
use com.brand4impact.client.invoker\Configuration;
use com.brand4impact.client.invoker\HeaderSelector;
use com.brand4impact.client.invoker\ObjectSerializer;

/**
 * CampaignApi Class Doc Comment
 *
 * @category Class
 * @package  com.brand4impact.client.invoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CampaignApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createCampaign
     *
     * Create a new campaign
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaignCreate $campaign campaign (required)
     * @param  \SplFileObject $primaryImage primaryImage (required)
     * @param  \SplFileObject $secondaryImage secondaryImage (required)
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError
     */
    public function createCampaign($campaign, $primaryImage, $secondaryImage)
    {
        list($response) = $this->createCampaignWithHttpInfo($campaign, $primaryImage, $secondaryImage);
        return $response;
    }

    /**
     * Operation createCampaignWithHttpInfo
     *
     * Create a new campaign
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaignCreate $campaign (required)
     * @param  \SplFileObject $primaryImage (required)
     * @param  \SplFileObject $secondaryImage (required)
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCampaignWithHttpInfo($campaign, $primaryImage, $secondaryImage)
    {
        $request = $this->createCampaignRequest($campaign, $primaryImage, $secondaryImage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCampaignAsync
     *
     * Create a new campaign
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaignCreate $campaign (required)
     * @param  \SplFileObject $primaryImage (required)
     * @param  \SplFileObject $secondaryImage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCampaignAsync($campaign, $primaryImage, $secondaryImage)
    {
        return $this->createCampaignAsyncWithHttpInfo($campaign, $primaryImage, $secondaryImage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCampaignAsyncWithHttpInfo
     *
     * Create a new campaign
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaignCreate $campaign (required)
     * @param  \SplFileObject $primaryImage (required)
     * @param  \SplFileObject $secondaryImage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCampaignAsyncWithHttpInfo($campaign, $primaryImage, $secondaryImage)
    {
        $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign';
        $request = $this->createCampaignRequest($campaign, $primaryImage, $secondaryImage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCampaign'
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaignCreate $campaign (required)
     * @param  \SplFileObject $primaryImage (required)
     * @param  \SplFileObject $secondaryImage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCampaignRequest($campaign, $primaryImage, $secondaryImage)
    {
        // verify the required parameter 'campaign' is set
        if ($campaign === null || (is_array($campaign) && count($campaign) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign when calling createCampaign'
            );
        }
        // verify the required parameter 'primaryImage' is set
        if ($primaryImage === null || (is_array($primaryImage) && count($primaryImage) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $primaryImage when calling createCampaign'
            );
        }
        // verify the required parameter 'secondaryImage' is set
        if ($secondaryImage === null || (is_array($secondaryImage) && count($secondaryImage) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $secondaryImage when calling createCampaign'
            );
        }

        $resourcePath = '/rest/platform/campaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($campaign !== null) {
            $formParams['campaign'] = ObjectSerializer::toFormValue($campaign);
        }
        // form params
        if ($primaryImage !== null) {
            $multipart = true;
            $formParams['primaryImage'] = [];
            $paramFiles = is_array($primaryImage) ? $primaryImage : [$primaryImage];
            foreach ($paramFiles as $paramFile) {
                $formParams['primaryImage'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($secondaryImage !== null) {
            $multipart = true;
            $formParams['secondaryImage'] = [];
            $paramFiles = is_array($secondaryImage) ? $secondaryImage : [$secondaryImage];
            foreach ($paramFiles as $paramFile) {
                $formParams['secondaryImage'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaign
     *
     * Get a single campaign
     *
     * @param  string $token The unique token for the campaign. (required)
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign
     */
    public function getCampaign($token)
    {
        list($response) = $this->getCampaignWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation getCampaignWithHttpInfo
     *
     * Get a single campaign
     *
     * @param  string $token The unique token for the campaign. (required)
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignWithHttpInfo($token)
    {
        $request = $this->getCampaignRequest($token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignAsync
     *
     * Get a single campaign
     *
     * @param  string $token The unique token for the campaign. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignAsync($token)
    {
        return $this->getCampaignAsyncWithHttpInfo($token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignAsyncWithHttpInfo
     *
     * Get a single campaign
     *
     * @param  string $token The unique token for the campaign. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignAsyncWithHttpInfo($token)
    {
        $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign';
        $request = $this->getCampaignRequest($token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaign'
     *
     * @param  string $token The unique token for the campaign. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignRequest($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getCampaign'
            );
        }

        $resourcePath = '/rest/platform/campaign/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaigns
     *
     * Get a set of campaigns
     *
     * @param  string $titleFilter The name of the filter (optional)
     * @param  int $page The number of the page. Possible values: 0 to unlimited (optional)
     * @param  int $size The number of items inside a page. Possible values: 1 to 100 (optional)
     * @param  string $sort The order direction for sorted results. Possible values: ASC or DESC (optional)
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaignItemWrapper|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError
     */
    public function getCampaigns($titleFilter = null, $page = null, $size = null, $sort = null)
    {
        list($response) = $this->getCampaignsWithHttpInfo($titleFilter, $page, $size, $sort);
        return $response;
    }

    /**
     * Operation getCampaignsWithHttpInfo
     *
     * Get a set of campaigns
     *
     * @param  string $titleFilter The name of the filter (optional)
     * @param  int $page The number of the page. Possible values: 0 to unlimited (optional)
     * @param  int $size The number of items inside a page. Possible values: 1 to 100 (optional)
     * @param  string $sort The order direction for sorted results. Possible values: ASC or DESC (optional)
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaignItemWrapper|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignsWithHttpInfo($titleFilter = null, $page = null, $size = null, $sort = null)
    {
        $request = $this->getCampaignsRequest($titleFilter, $page, $size, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaignItemWrapper' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaignItemWrapper', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaignItemWrapper';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaignItemWrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignsAsync
     *
     * Get a set of campaigns
     *
     * @param  string $titleFilter The name of the filter (optional)
     * @param  int $page The number of the page. Possible values: 0 to unlimited (optional)
     * @param  int $size The number of items inside a page. Possible values: 1 to 100 (optional)
     * @param  string $sort The order direction for sorted results. Possible values: ASC or DESC (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignsAsync($titleFilter = null, $page = null, $size = null, $sort = null)
    {
        return $this->getCampaignsAsyncWithHttpInfo($titleFilter, $page, $size, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignsAsyncWithHttpInfo
     *
     * Get a set of campaigns
     *
     * @param  string $titleFilter The name of the filter (optional)
     * @param  int $page The number of the page. Possible values: 0 to unlimited (optional)
     * @param  int $size The number of items inside a page. Possible values: 1 to 100 (optional)
     * @param  string $sort The order direction for sorted results. Possible values: ASC or DESC (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignsAsyncWithHttpInfo($titleFilter = null, $page = null, $size = null, $sort = null)
    {
        $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaignItemWrapper';
        $request = $this->getCampaignsRequest($titleFilter, $page, $size, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaigns'
     *
     * @param  string $titleFilter The name of the filter (optional)
     * @param  int $page The number of the page. Possible values: 0 to unlimited (optional)
     * @param  int $size The number of items inside a page. Possible values: 1 to 100 (optional)
     * @param  string $sort The order direction for sorted results. Possible values: ASC or DESC (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignsRequest($titleFilter = null, $page = null, $size = null, $sort = null)
    {

        $resourcePath = '/rest/platform/campaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($titleFilter !== null) {
            if('form' === 'form' && is_array($titleFilter)) {
                foreach($titleFilter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['titleFilter'] = $titleFilter;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation switchCampaign
     *
     * Switch campaign status
     *
     * @param  string $token token (required)
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign
     */
    public function switchCampaign($token)
    {
        list($response) = $this->switchCampaignWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation switchCampaignWithHttpInfo
     *
     * Switch campaign status
     *
     * @param  string $token (required)
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function switchCampaignWithHttpInfo($token)
    {
        $request = $this->switchCampaignRequest($token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation switchCampaignAsync
     *
     * Switch campaign status
     *
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function switchCampaignAsync($token)
    {
        return $this->switchCampaignAsyncWithHttpInfo($token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation switchCampaignAsyncWithHttpInfo
     *
     * Switch campaign status
     *
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function switchCampaignAsyncWithHttpInfo($token)
    {
        $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign';
        $request = $this->switchCampaignRequest($token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'switchCampaign'
     *
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function switchCampaignRequest($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling switchCampaign'
            );
        }

        $resourcePath = '/rest/platform/campaign/{token}/switch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCampaign
     *
     * Update a campaign
     *
     * @param  string $token token (required)
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaignUpdate $campaign campaign (required)
     * @param  \SplFileObject $primaryImage primaryImage (required)
     * @param  \SplFileObject $secondaryImage secondaryImage (required)
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError
     */
    public function updateCampaign($token, $campaign, $primaryImage, $secondaryImage)
    {
        list($response) = $this->updateCampaignWithHttpInfo($token, $campaign, $primaryImage, $secondaryImage);
        return $response;
    }

    /**
     * Operation updateCampaignWithHttpInfo
     *
     * Update a campaign
     *
     * @param  string $token (required)
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaignUpdate $campaign (required)
     * @param  \SplFileObject $primaryImage (required)
     * @param  \SplFileObject $secondaryImage (required)
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCampaignWithHttpInfo($token, $campaign, $primaryImage, $secondaryImage)
    {
        $request = $this->updateCampaignRequest($token, $campaign, $primaryImage, $secondaryImage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCampaignAsync
     *
     * Update a campaign
     *
     * @param  string $token (required)
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaignUpdate $campaign (required)
     * @param  \SplFileObject $primaryImage (required)
     * @param  \SplFileObject $secondaryImage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCampaignAsync($token, $campaign, $primaryImage, $secondaryImage)
    {
        return $this->updateCampaignAsyncWithHttpInfo($token, $campaign, $primaryImage, $secondaryImage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCampaignAsyncWithHttpInfo
     *
     * Update a campaign
     *
     * @param  string $token (required)
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaignUpdate $campaign (required)
     * @param  \SplFileObject $primaryImage (required)
     * @param  \SplFileObject $secondaryImage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCampaignAsyncWithHttpInfo($token, $campaign, $primaryImage, $secondaryImage)
    {
        $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaign';
        $request = $this->updateCampaignRequest($token, $campaign, $primaryImage, $secondaryImage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCampaign'
     *
     * @param  string $token (required)
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCampaignUpdate $campaign (required)
     * @param  \SplFileObject $primaryImage (required)
     * @param  \SplFileObject $secondaryImage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCampaignRequest($token, $campaign, $primaryImage, $secondaryImage)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling updateCampaign'
            );
        }
        // verify the required parameter 'campaign' is set
        if ($campaign === null || (is_array($campaign) && count($campaign) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign when calling updateCampaign'
            );
        }
        // verify the required parameter 'primaryImage' is set
        if ($primaryImage === null || (is_array($primaryImage) && count($primaryImage) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $primaryImage when calling updateCampaign'
            );
        }
        // verify the required parameter 'secondaryImage' is set
        if ($secondaryImage === null || (is_array($secondaryImage) && count($secondaryImage) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $secondaryImage when calling updateCampaign'
            );
        }

        $resourcePath = '/rest/platform/campaign/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }

        // form params
        if ($campaign !== null) {
            $formParams['campaign'] = ObjectSerializer::toFormValue($campaign);
        }
        // form params
        if ($primaryImage !== null) {
            $multipart = true;
            $formParams['primaryImage'] = [];
            $paramFiles = is_array($primaryImage) ? $primaryImage : [$primaryImage];
            foreach ($paramFiles as $paramFile) {
                $formParams['primaryImage'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($secondaryImage !== null) {
            $multipart = true;
            $formParams['secondaryImage'] = [];
            $paramFiles = is_array($secondaryImage) ? $secondaryImage : [$secondaryImage];
            foreach ($paramFiles as $paramFile) {
                $formParams['secondaryImage'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
