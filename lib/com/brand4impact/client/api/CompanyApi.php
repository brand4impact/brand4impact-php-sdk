<?php
/**
 * CompanyApi
 * PHP version 7.3
 *
 * @category Class
 * @package  com.brand4impact.client.invoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Total API Reference
 *
 * Este contrato se usara para generar los clientes con todos los servicios necesarios.  `!Uso exclusivo interno!`               ---
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@brand4impact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.brand4impact.client.invoker\com.brand4impact.client.api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com.brand4impact.client.invoker\ApiException;
use com.brand4impact.client.invoker\Configuration;
use com.brand4impact.client.invoker\HeaderSelector;
use com.brand4impact.client.invoker\ObjectSerializer;

/**
 * CompanyApi Class Doc Comment
 *
 * @category Class
 * @package  com.brand4impact.client.invoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CompanyApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createCompany
     *
     * Create a new Company
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyCreate $company company (required)
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyCreateLegal $legal legal (required)
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyCreateAdmin $admin admin (required)
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError
     */
    public function createCompany($company, $legal, $admin)
    {
        list($response) = $this->createCompanyWithHttpInfo($company, $legal, $admin);
        return $response;
    }

    /**
     * Operation createCompanyWithHttpInfo
     *
     * Create a new Company
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyCreate $company (required)
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyCreateLegal $legal (required)
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyCreateAdmin $admin (required)
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCompanyWithHttpInfo($company, $legal, $admin)
    {
        $request = $this->createCompanyRequest($company, $legal, $admin);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCompanyAsync
     *
     * Create a new Company
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyCreate $company (required)
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyCreateLegal $legal (required)
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyCreateAdmin $admin (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCompanyAsync($company, $legal, $admin)
    {
        return $this->createCompanyAsyncWithHttpInfo($company, $legal, $admin)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCompanyAsyncWithHttpInfo
     *
     * Create a new Company
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyCreate $company (required)
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyCreateLegal $legal (required)
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyCreateAdmin $admin (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCompanyAsyncWithHttpInfo($company, $legal, $admin)
    {
        $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany';
        $request = $this->createCompanyRequest($company, $legal, $admin);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCompany'
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyCreate $company (required)
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyCreateLegal $legal (required)
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyCreateAdmin $admin (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCompanyRequest($company, $legal, $admin)
    {
        // verify the required parameter 'company' is set
        if ($company === null || (is_array($company) && count($company) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company when calling createCompany'
            );
        }
        // verify the required parameter 'legal' is set
        if ($legal === null || (is_array($legal) && count($legal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $legal when calling createCompany'
            );
        }
        // verify the required parameter 'admin' is set
        if ($admin === null || (is_array($admin) && count($admin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $admin when calling createCompany'
            );
        }

        $resourcePath = '/rest/platform/company';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($company !== null) {
            $formParams['company'] = ObjectSerializer::toFormValue($company);
        }
        // form params
        if ($legal !== null) {
            $formParams['legal'] = ObjectSerializer::toFormValue($legal);
        }
        // form params
        if ($admin !== null) {
            $formParams['admin'] = ObjectSerializer::toFormValue($admin);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompany
     *
     * Get your Company
     *
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError
     */
    public function getCompany()
    {
        list($response) = $this->getCompanyWithHttpInfo();
        return $response;
    }

    /**
     * Operation getCompanyWithHttpInfo
     *
     * Get your Company
     *
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyWithHttpInfo()
    {
        $request = $this->getCompanyRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyAsync
     *
     * Get your Company
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyAsync()
    {
        return $this->getCompanyAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyAsyncWithHttpInfo
     *
     * Get your Company
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyAsyncWithHttpInfo()
    {
        $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany';
        $request = $this->getCompanyRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompany'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyRequest()
    {

        $resourcePath = '/rest/platform/company';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCompany
     *
     * Update Company data
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyUpdate $company company (required)
     * @param  \SplFileObject $logo logo (required)
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError
     */
    public function updateCompany($company, $logo)
    {
        list($response) = $this->updateCompanyWithHttpInfo($company, $logo);
        return $response;
    }

    /**
     * Operation updateCompanyWithHttpInfo
     *
     * Update Company data
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyUpdate $company (required)
     * @param  \SplFileObject $logo (required)
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCompanyWithHttpInfo($company, $logo)
    {
        $request = $this->updateCompanyRequest($company, $logo);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCompanyAsync
     *
     * Update Company data
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyUpdate $company (required)
     * @param  \SplFileObject $logo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCompanyAsync($company, $logo)
    {
        return $this->updateCompanyAsyncWithHttpInfo($company, $logo)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCompanyAsyncWithHttpInfo
     *
     * Update Company data
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyUpdate $company (required)
     * @param  \SplFileObject $logo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCompanyAsyncWithHttpInfo($company, $logo)
    {
        $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany';
        $request = $this->updateCompanyRequest($company, $logo);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCompany'
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyUpdate $company (required)
     * @param  \SplFileObject $logo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCompanyRequest($company, $logo)
    {
        // verify the required parameter 'company' is set
        if ($company === null || (is_array($company) && count($company) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company when calling updateCompany'
            );
        }
        // verify the required parameter 'logo' is set
        if ($logo === null || (is_array($logo) && count($logo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $logo when calling updateCompany'
            );
        }

        $resourcePath = '/rest/platform/company';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($company !== null) {
            $formParams['company'] = ObjectSerializer::toFormValue($company);
        }
        // form params
        if ($logo !== null) {
            $multipart = true;
            $formParams['logo'] = [];
            $paramFiles = is_array($logo) ? $logo : [$logo];
            foreach ($paramFiles as $paramFile) {
                $formParams['logo'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCompanyLegal
     *
     * Update legal Company info
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyUpdateLegal $legal legal (required)
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError
     */
    public function updateCompanyLegal($legal)
    {
        list($response) = $this->updateCompanyLegalWithHttpInfo($legal);
        return $response;
    }

    /**
     * Operation updateCompanyLegalWithHttpInfo
     *
     * Update legal Company info
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyUpdateLegal $legal (required)
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCompanyLegalWithHttpInfo($legal)
    {
        $request = $this->updateCompanyLegalRequest($legal);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCompanyLegalAsync
     *
     * Update legal Company info
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyUpdateLegal $legal (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCompanyLegalAsync($legal)
    {
        return $this->updateCompanyLegalAsyncWithHttpInfo($legal)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCompanyLegalAsyncWithHttpInfo
     *
     * Update legal Company info
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyUpdateLegal $legal (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCompanyLegalAsyncWithHttpInfo($legal)
    {
        $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany';
        $request = $this->updateCompanyLegalRequest($legal);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCompanyLegal'
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyUpdateLegal $legal (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCompanyLegalRequest($legal)
    {
        // verify the required parameter 'legal' is set
        if ($legal === null || (is_array($legal) && count($legal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $legal when calling updateCompanyLegal'
            );
        }

        $resourcePath = '/rest/platform/company/legal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($legal !== null) {
            $formParams['legal'] = ObjectSerializer::toFormValue($legal);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCompanyTopic
     *
     * Update selected topics for your Company
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyUpdateTopic $sdg sdg (required)
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError
     */
    public function updateCompanyTopic($sdg)
    {
        list($response) = $this->updateCompanyTopicWithHttpInfo($sdg);
        return $response;
    }

    /**
     * Operation updateCompanyTopicWithHttpInfo
     *
     * Update selected topics for your Company
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyUpdateTopic $sdg (required)
     *
     * @throws \com.brand4impact.client.invoker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError|\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCompanyTopicWithHttpInfo($sdg)
    {
        $request = $this->updateCompanyTopicRequest($sdg);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 500:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.brand4impact.client.invoker\com.brand4impact.client.model\RestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCompanyTopicAsync
     *
     * Update selected topics for your Company
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyUpdateTopic $sdg (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCompanyTopicAsync($sdg)
    {
        return $this->updateCompanyTopicAsyncWithHttpInfo($sdg)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCompanyTopicAsyncWithHttpInfo
     *
     * Update selected topics for your Company
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyUpdateTopic $sdg (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCompanyTopicAsyncWithHttpInfo($sdg)
    {
        $returnType = '\com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompany';
        $request = $this->updateCompanyTopicRequest($sdg);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCompanyTopic'
     *
     * @param  \com.brand4impact.client.invoker\com.brand4impact.client.model\PlatformCompanyUpdateTopic $sdg (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCompanyTopicRequest($sdg)
    {
        // verify the required parameter 'sdg' is set
        if ($sdg === null || (is_array($sdg) && count($sdg) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sdg when calling updateCompanyTopic'
            );
        }

        $resourcePath = '/rest/platform/company/topic';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($sdg !== null) {
            $formParams['sdg'] = ObjectSerializer::toFormValue($sdg);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
